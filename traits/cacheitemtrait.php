<?php

namespace shgysk8zer0\PHPAPI\Traits;

use \shgysk8zer0\PHPAPI\Interfaces\{CacheItemInterface};

use \DateInterval;

use \DateTimeImmutable;

use \DateTimeInterface;

/**
 * CacheItemTrait defines a trait for interacting with objects inside a cache.
 *
 * Each Item object MUST be associated with a specific key, which can be set
 * according to the implementing system and is typically passed by the
 * Cache\CacheItemPoolInterface object.
 *
 * The Cache\CacheItemInterface object encapsulates the storage and retrieval of
 * cache items. Each Cache\CacheItemInterface is generated by a
 * Cache\CacheItemPoolInterface object, which is responsible for any required
 * setup as well as associating the object with a unique Key.
 * Cache\CacheItemInterface objects MUST be able to store and retrieve any type
 * of PHP value defined in the Data section of the specification.
 *
 * Calling Libraries MUST NOT instantiate Item objects themselves. They may only
 * be requested from a Pool object via the getItem() method.  Calling Libraries
 * SHOULD NOT assume that an Item created by one Implementing Library is
 * compatible with a Pool from another Implementing Library.
 */
trait CacheItemTrait
{
	private $_expires = null;

	private $_value = null;

	private $_changed = false;

	/**
	 * Returns the key for the current cache item.
	 *
	 * The key is loaded by the Implementing Library, but should be available to
	 * the higher level callers when needed.
	 *
	 * @return string
	 *   The key string for this cache item.
	 */
	abstract public function getKey(): string;

	/**
	 * Retrieves the value of the item from the cache associated with this object's key.
	 *
	 * The value returned must be identical to the value originally stored by set().
	 *
	 * If isHit() returns false, this method MUST return null. Note that null
	 * is a legitimate cached value, so the isHit() method SHOULD be used to
	 * differentiate between "null value was found" and "no value was found."
	 *
	 * @return mixed
	 *   The value corresponding to this cache item's key, or null if not found.
	 */
	final public function get():? object
	{
		if ($this->isHit()) {
			return unserialize($this->_getSerialized());
		} else {
			return null;
		}
	}

	/**
	 * Confirms if the cache item lookup resulted in a cache hit.
	 *
	 * Note: This method MUST NOT have a race condition between calling isHit()
	 * and calling get().
	 *
	 * @return bool
	 *   True if the request resulted in a cache hit. False otherwise.
	 */
	final public function isHit(): bool
	{
		if ($this->_isExpired()) {
			return false;
		} else {
			return isset($this->_value);
		}
	}

	/**
	 * Sets the value represented by this cache item.
	 *
	 * The $value argument may be any item that can be serialized by PHP,
	 * although the method of serialization is left up to the Implementing
	 * Library.
	 *
	 * @param mixed $value
	 *   The serializable value to be stored.
	 *
	 * @return static
	 *   The invoked object.
	 */
	final public function set(?object $value): CacheItemInterface
	{
		$this->_changed = true;

		if (isset($value)) {
			$this->_setSerialized(serialize($value));
		} else {
			$this->_setSerialized(null);
		}

		return $this;
	}

	/**
	 * Sets the expiration time for this cache item.
	 *
	 * @param \DateTimeInterface|null $expiration
	 *   The point in time after which the item MUST be considered expired.
	 *   If null is passed explicitly, a default value MAY be used. If none is set,
	 *   the value should be stored permanently or for as long as the
	 *   implementation allows.
	 *
	 * @return static
	 *   The called object.
	 */
	final public function expiresAt(?DateTimeInterface $expiration): CacheItemInterface
	{
		$this->_expires = $expiration;
		return $this;
	}

	/**
	 * Sets the expiration time for this cache item.
	 *
	 * @param \DateInterval|null $time
	 *   The period of time from the present after which the item MUST be considered
	 *   expired. If null is passed explicitly, a default value MAY be used.
	 *   If none is set, the value should be stored permanently or for as long as the
	 *   implementation allows.
	 *
	 * @return static
	 *   The called object.
	 */
	final public function expiresAfter(?DateInterval $time): CacheItemInterface
	{
		if (isset($time)) {
			$now = new DateTimeImmutable();
			$this->expiresAt($now->add($time));
		} else {
			$this->expiresAt(null);
		}

		return $this;
	}

	final protected function _hasSerialized(): bool
	{
		return isset($this->_value);
	}

	final protected function _getSerialized():? string
	{
		return $this->_value;
	}

	final protected function _setSerialized(?string $value): void
	{
		$this->_value = $value;
	}

	final protected function _isExpired(): bool
	{
		return $this->_hasExpires() and $this->_getExpires() < new DateTimeImmutable();
	}

	final protected function _hasExpires(): bool
	{
		return isset($this->_expires);
	}

	final protected function _getExpires():? DateTimeInterface
	{
		return $this->_expires;
	}

	final protected function _getExpiresAsString(string $format = DateTimeInterface::W3C):? string
	{
		if ($this->_hasExpires()) {
			return $this->_getExpires()->format($format);
		} else {
			return null;
		}
	}

	final protected function _changed(): bool
	{
		return $this->_changed;
	}
}

